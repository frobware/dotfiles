#!/usr/bin/perl
#
# clean-files : Removes files in a directory tree.
#
# The first argument must be a Perl expression that will identify
# the relevant files using $_ as the filename. The second argument,
# if given, is the directory to start the search in. The two arguments
# can be separated by any of the switches -n, -v, -t, and -l.
#
# This program underlies such programs as "clean-emacs-files",
# "clean-tex-files", and "clean-obj-files". See these for examples
# of how to specify complex patterns. Note that those programs should
# set the environment variable CLEAN_FILES_CALLER to get an appropriate
# usage message.
#
# George Ferguson, ferguson@cs.rochester.edu, 23 Aug 1991.
#

# Load the library code that knows how to walk directory trees
require "find.pl";

# Set usage message
if (($program=$ENV{'CLEAN_FILES_CALLER'}) ne "") {
    $usage="usage: $program [-ntvl] [directory]\n";
} else {
    $program=`basename $0`;
    chop $program;
    $usage="usage: $program pattern [-ntvl] [directory]\n";
}

# The pattern has to be the first argument
if ($#ARGV == -1)
    { die "$usage"; }
else
    { $pattern=$ARGV[0]; shift; }

# Parse switches
while ($_ = $ARGV[0], /^-/) {
    shift;
    last if /^--$/;
    if (/n/) { $noexec = 1; }
    if (/v/) { $verbose = 1; }
    if (/t/) { $totals = 1; }
    if (/l/) { $long = 1; }
    if (/-.*[^ntvl]/) { die "$usage"; }
}
# Note that -n implies -v unless -V or -t was given
if ($noexec && !$long && !$totals) {
    $verbose = 1;
}

# If we need to be very verbose, then set the translation arrays
if ($long) {
    @rwx = ('---','--x','-w-','-wx','r--','r-x','rw-','rwx');
    @moname = (Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec);
    while (($name, $pw, $uid) = getpwent) {
	$user{$uid} = $name unless $user{$uid};
    }
    while (($name, $pw, $gid) = getgrent) {
	$group{$gid} = $name unless $group{$gid};
    }
}

# Now do the find, which calls &wanted for each file
if ($#ARGV == -1)
    { &find('.'); }
elsif ($#ARGV == 0)
    { &find($ARGV[0]); }
else
    { die "$usage"; }

# Print the totals if requested
if ($totals) {
    printf "$program: $numfiles files ($numbytes bytes) %sdeleted\n",
	   ($noexec ? "would be " : "");
}

# Goodbye
exit;

# wanted: Called for each file. Filename is in $_, directory name in
# $dir (and we are switched to that directory), and full pathname in $name.
sub wanted {
    if (eval($pattern)) {
	if ($verbose) {
	    print "$name\n";
	}
	if ($totals || $long) {
	    ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size) = lstat($_);
	    if ($long) {
		&ls;
	    }
	    if ($totals) {
		$numfiles += 1;
		$numbytes += $size;
	    }
	}
	if (!$noexec) {
	    unlink($_);
	}
    }
}

# ls: Generated automatically by find2perl for the -ls option
sub ls {
    ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$sizemm,
      $atime,$mtime,$ctime,$blksize,$blocks) = lstat(_);

    $pname = $name;

    if (defined $blocks) {
	$blocks = int(($blocks + 1) / 2);
    }
    else {
	$blocks = int(($size + 1023) / 1024);
    }

    if    (-f _) { $perms = '-'; }
    elsif (-d _) { $perms = 'd'; }
    elsif (-c _) { $perms = 'c'; $sizemm = &sizemm; }
    elsif (-b _) { $perms = 'b'; $sizemm = &sizemm; }
    elsif (-p _) { $perms = 'p'; }
    elsif (-S _) { $perms = 's'; }
    else         { $perms = 'l'; $pname .= ' -> ' . readlink($_); }

    $tmpmode = $mode;
    $tmp = $rwx[$tmpmode & 7];
    $tmpmode >>= 3;
    $tmp = $rwx[$tmpmode & 7] . $tmp;
    $tmpmode >>= 3;
    $tmp = $rwx[$tmpmode & 7] . $tmp;
    substr($tmp,2,1) =~ tr/-x/Ss/ if -u _;
    substr($tmp,5,1) =~ tr/-x/Ss/ if -g _;
    substr($tmp,8,1) =~ tr/-x/Tt/ if -k _;
    $perms .= $tmp;

    $user = $user{$uid} || $uid;
    $group = $group{$gid} || $gid;

    ($sec,$min,$hour,$mday,$mon,$year) = localtime($mtime);
    $moname = $moname[$mon];
    if (-M _ > 365.25 / 2) {
	$timeyear = '19' . $year;
    }
    else {
	$timeyear = sprintf("%02d:%02d", $hour, $min);
    }

    printf "%5lu %4ld %-10s %2d %-8s %-8s %8s %s %2d %5s %s\n",
	    $ino,
		 $blocks,
		      $perms,
			    $nlink,
				$user,
				     $group,
					  $sizemm,
					      $moname,
						 $mday,
						     $timeyear,
							 $pname;
    1;
}

sub sizemm {
    sprintf("%3d, %3d", ($rdev >> 8) & 255, $rdev & 255);
}

