# -*-shell-script-*-

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

[ -f /etc/skel/.bashrc ] && . /etc/skel/.bashrc

function source_if_exists {
    local fname=$1
    [[ -f $fname ]] && . $fname
}

if [[ `which java` ]]; then
    export JAVA_HOME=$(dirname $(dirname $(which java)))
fi

#source_if_exists /etc/profile.d/jdk.sh
source_if_exists ~/.bash_bootstrap

. ${BASH_HOME}/functions/require
. ${BASH_HOME}/functions/path-functions

# for non login ssh connections
# path_prepend PATH /usr/local/sbin
# path_append PATH /usr/X11R6/bin

XUSERFILESEARCHPATH=$HOME/lib/X11/app-defaults/%N%S

# [ -f ~/.bashrc_emacs ] && . ~/.bashrc_emacs

# Like many of you, I constantly have many terminals open at once. I
# wish bash would dump every command I type there instead of seemingly
# randomly keeping the history of a single one.  Ho ho ho.  This does
# the trick.  http://www.geocities.com/h2428/petar/bash_hist.htm.

# Make bash history persistent across terminal sessions.

# First we instruct Bash not to store history by overwriting but to
# append lines. PROMPT_COMMAND is an environment variable which holds
# list of commands that will be executed before Bash begins accepting
# input for the next command, by calling 'history -a' we store all
# commands to disk.

shopt -s histappend
# single line cmd history
shopt -s cmdhist
export PROMPT_COMMAND='history -a'
export HISTSIZE=5000000
export HISTCONTROL=ignoredups
export HISTIGNORE="&:ls:[bf]g:exit"

[ -f /etc/bash_completion ] && . /etc/bash_completion

# Graciously stolen from idf
function check_exit_status ()
{
    local status="$?"
    local msg=""
    local signal=""

    if [ ${status} -ne 0 ]; then
	if [ $((${status} < 128)) -ne 0 ] ; then
	    msg="exit (${status})"
	else
	    signal="$(builtin kill -l $((${status} - 128)) 2>/dev/null)"
	    if [ "$signal" ]; then msg="kill -$signal$msg"; fi
	fi
	echo "[${status} => ${msg}]" 1>&2
    fi
    return 0
}

[ -n "$TMUX" ] && export TERM=screen-256color

declare -x check_exit_status
# export PS1='[\u@\h:\w]\n$ '
# export PS1='\[\e]0;\u@\h$ \w\a\]${debian_chroot:+($debian_chroot)}\u@\h:\w\n: '

#if [[ -z "$TMUX" ]]; then
#   tmux has-session &> /dev/null
#   if [ $? -eq 1 ]; then
#	exec tmux new
#	exit
#   else
#	exec tmux attach
#	exit
#   fi
#fi

shopt -s checkwinsize

# If this is an xterm set the title to user@host:dir
case "$TERM" in
    xterm*|rxvt*)
	PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'

	# Show the currently running command in the terminal title:
	# http://www.davidpashley.com/articles/xterm-titles-with-bash.html
	show_command_in_title_bar()
	{
	    case "$BASH_COMMAND" in
		*\033]0*)
		# The command is trying to set the title bar as well;
		# this is most likely the execution of $PROMPT_COMMAND.
		# In any case nested escapes confuse the terminal, so don't
		# output them.
		    ;;
		*)
		    echo -ne "\033]0;${USER}@${HOSTNAME}: ${BASH_COMMAND}\007"
		    ;;
	   esac
	}
    trap show_command_in_title_bar DEBUG
    ;;
    *)
    ;;
esac

# if hash keychain >/dev/null 2>&1; then
#     eval $(keychain --eval --inherit any)
# fi

if type -p brew 2>/dev/null >/dev/null; then
    if [ -f $(brew --prefix)/etc/bash_completion ]; then
	. $(brew --prefix)/etc/bash_completion
    fi
fi

[ -f $HOME/.bash_aliases ] && . $HOME/.bash_aliases

# Base16 Shell
# BASE16_SHELL="$HOME/.config/base16-shell/base16-default.dark.sh"
# [[ -s $BASE16_SHELL ]] && source $BASE16_SHELL
